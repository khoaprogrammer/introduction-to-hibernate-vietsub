1
00:00:01,000 --> 00:00:04,000
Now in Hibernate, filters are actually pretty easy to configure.

2
00:00:04,000 --> 00:00:07,000
I've already created an example here and we'll walk through this.

3
00:00:07,000 --> 00:00:11,000
What I've done is I've created this filter called nameFilter.

4
00:00:11,000 --> 00:00:18,000
And I've made it so I can pass in a parameter to be able to filter users on a particular name using a like.

5
00:00:18,000 --> 00:00:24,000
So for this example, what I've done is I've said for this session I want to enable this name filter

6
00:00:24,000 --> 00:00:29,000
and I want to set the parameter for name in this filter to be j%.

7
00:00:29,000 --> 00:00:35,000
So basically what this is going to do is it's going to limit any users that are queried

8
00:00:35,000 --> 00:00:41,000
that they're going to have to start with the letter J for their name property.

9
00:00:41,000 --> 00:00:44,000
If they don't, we're not going to see that data.

10
00:00:44,000 --> 00:00:48,000
Now you can imagine how you can apply this to all kinds of other conditions that you might want to have.

11
00:00:48,000 --> 00:00:56,000
Perhaps you had a user access security level, or maybe the date that a user was created,

12
00:00:56,000 --> 00:01:03,000
or some other type of filter that you'd want to apply to all of some set of data.

13
00:01:03,000 --> 00:01:10,000
Now, what I've had to do in order to enable this, is inside user I cerate first of all this filter-def.

14
00:01:10,000 --> 00:01:13,000
And you can define this anywhere under a Hibernate mapping.

15
00:01:13,000 --> 00:01:16,000
It doesn't have to be in user but since this is only going to be used on user

16
00:01:16,000 --> 00:01:19,000
this is a good place to define this.

17
00:01:19,000 --> 00:01:22,000
In this filter-def I give my filter a name, it's called nameFilter.

18
00:01:22,000 --> 00:01:26,000
I set a condition, and this is basically just a where clause

19
00:01:26,000 --> 00:01:31,000
so I'm just using HQL here and I'm just saying where the name is like :name,

20
00:01:31,000 --> 00:01:35,000
remember that's our parameter, and then I'm defining what the parameter is.

21
00:01:35,000 --> 00:01:39,000
There's a parameter called name. It's of type string.

22
00:01:39,000 --> 00:01:43,000
Now I have a filter that I can use with any entity.

23
00:01:43,000 --> 00:01:49,000
Here inside of our user's entity, what I'm going to do is add a filter at the bottom.

24
00:01:49,000 --> 00:01:54,000
You do have to put this near the bottom, you can't put it at the top otherwise you will get an error,

25
00:01:54,000 --> 00:01:58,000
and here I have just set up this filter and I'm saying what the name is, nameFilter.

26
00:01:58,000 --> 00:02:04,000
You can also override the condition here if you want to depending on how you want to use this filter.

27
00:02:04,000 --> 00:02:09,000
But in this case, it's just applying the nameFilter to this user entity.

28
00:02:09,000 --> 00:02:14,000
Now the final step is what we looked a first which is actually inside of our session.

29
00:02:14,000 --> 00:02:19,000
We need to say enableFilter and then say what the filter is, and then any parameters that it needs.

30
00:02:19,000 --> 00:02:24,000
This will make sure that for this entire session this nameFilter will be enabled.

31
00:02:24,000 --> 00:02:26,000
And it's set up to work on user.

32
00:02:26,000 --> 00:02:32,000
So essentially what's going to happen, is this is going to add a where clause or an and, if appropriate,

33
00:02:32,000 --> 00:02:37,000
to the where clause that is going to perform this filter.

34
00:02:37,000 --> 00:02:43,000
And I changed our code a little bit here just to do a regular create query in HQL.

35
00:02:43,000 --> 00:02:49,000
You'll notice if you try to apply this filter with a SQL query, a native SQL query, it won't actually work

36
00:02:49,000 --> 00:02:53,000
because it won't be able to figure out how to append that on.

37
00:02:53,000 --> 00:02:57,000
So this will go through, you have to think about that when you're using filters

38
00:02:57,000 --> 00:03:02,000
another good reason to try to stay with the criteria API and the HQL because if you have a filter

39
00:03:02,000 --> 00:03:05,000
it's not going to get applied to your native SQL.

40
00:03:05,000 --> 00:03:10,000
So we're just selecting all the users here and we're listing the users like we did before.

41
00:03:10,000 --> 00:03:14,000
Let's go ahead and comment out this enableFilter.

42
00:03:14,000 --> 00:03:18,000
And we'll run this and let's look at the output.

43
00:03:18,000 --> 00:03:22,000
So you can see, we have our output that we've been getting before

44
00:03:22,000 --> 00:03:26,000
with our entity loaded, and all of that, and we have Joe, Bob, Amy.

45
00:03:26,000 --> 00:03:32,000
Remember we went through all of our users and then we had gotten Joe by that id of 1.

46
00:03:32,000 --> 00:03:40,000
So everything is working, just as it was before, but now let's see what happens when we enable this filter.

47
00:03:40,000 --> 00:03:46,000
So because we're filtering on name, and we're saying that it's like j%,

48
00:03:46,000 --> 00:03:49,000
we should expect to only get Joe back, ever.

49
00:03:49,000 --> 00:03:52,000
So let's go ahead and run our code now.

50
00:03:52,000 --> 00:03:56,000
And when I go in here in the console you can see what's happened.

51
00:03:56,000 --> 00:04:00,000
We don't have the rest of the users, we just have Joe.

52
00:04:00,000 --> 00:04:05,000
And interestingly, if we look at this select, let's see what we have here,

53
00:04:05,000 --> 00:04:10,000
you can see that it's added something on to the end here.

54
00:04:10,000 --> 00:04:17,000
So you can see right here, we've got his where clause that was just added where user0_.name like ?

55
00:04:17,000 --> 00:04:19,000
and this is going to get filled in with that parameter.

56
00:04:19,000 --> 00:04:23,000
So when you add a filter you're basically just adding a where clause,

57
00:04:23,000 --> 00:04:29,000
so you do have to keep this in mind because if you were to add a filter that would use a join

58
00:04:29,000 --> 00:04:32,000
it's not going to know to join for you automatically.

59
00:04:32,000 --> 00:04:38,000
So you are better off creating a subselect inside of your filter if you need to do a join

60
00:04:38,000 --> 00:04:40,000
than trying to just access some data.

61
00:04:40,000 --> 00:04:49,000
So for example, in our code we created our filter on this property name that exists on user.

62
00:04:49,000 --> 00:04:54,000
If we tried to get the total, if we said proteindata.total, this wouldn't work here, not like this.

63
00:04:54,000 --> 00:05:00,000
We'd have to actually do a subselect here because you couldn't just add this as a where clause

64
00:05:00,000 --> 00:05:03,000
to the end of the query because it requires a join.

65
00:05:03,000 --> 00:05:07,000
So you do have to keep that in mind but filters are pretty easy to define

66
00:05:07,000 --> 00:05:11,000
and they're really useful in the situations where you want to make sure that you're filtering out some data.

67
00:05:11,000 --> 00:05:16,000
If you think about the alternative, if we didn't use this filter what we'd have to do

68
00:05:16,000 --> 00:05:22,000
is we'd have to, in all of our queries, add to the end of this,

69
00:05:22,000 --> 00:05:26,000
this check for a particular user name,

70
00:05:26,000 --> 00:05:31,000
or let's say that we did this for some security mechanism, we'd have to set that.

71
00:05:31,000 --> 00:05:35,000
And the nice thing about this is it's parameterized as well so we could change this filter,

72
00:05:35,000 --> 00:05:39,000
we could make this filter programmatic based on certain conditions.

73
00:05:39,000 --> 00:59:00,000
And this really gives us a lot of ability to make our queries flexible.

