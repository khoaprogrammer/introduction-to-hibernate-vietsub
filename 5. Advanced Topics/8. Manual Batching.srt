1
00:00:00,000 --> 00:00:05,000
Now many times you're not going to be able to do batch processing just using an HQL statement.

2
00:00:05,000 --> 00:00:10,000
There's going to be times where you're going to need to execute some logic in your code

3
00:00:10,000 --> 00:00:16,000
to determine how to update a particular entity, or what to do.

4
00:00:16,000 --> 00:00:19,000
In those cases, when you're working with a very large set of data,

5
00:00:19,000 --> 00:00:24,000
you're going to have to implement batch processing in somewhat of a manual way.

6
00:00:24,000 --> 00:00:28,000
So I'm going to show you an example here of using update.

7
00:00:28,000 --> 00:00:33,000
I've already coded up this example to save us some time since we're going to be covering a lot in this module.

8
00:00:33,000 --> 00:00:37,000
And what I've basically done is I've started in my hibernate-config

9
00:00:37,000 --> 00:00:43,000
and I've set this hibernate.jdbc.batch_size, I've set this to twenty,

10
00:00:43,000 --> 00:00:45,000
you can set this to whatever is a reasonable amount.

11
00:00:45,000 --> 00:00:51,000
We don't have that many users in our database in our dummy data so it's not going to matter that much

12
00:00:51,000 --> 00:00:59,000
but you do need to set this to something so that it will be able to batch up the data into these chunks.

13
00:00:59,000 --> 00:01:07,000
Next, inside of our main program, what I've done here is I'm using this createCriteria that we had before

14
00:01:07,000 --> 00:01:12,000
to get all the users, but I'm doing something special here.

15
00:01:12,000 --> 00:01:16,000
Normally we were using list, but this time I'm using scroll.

16
00:01:16,000 --> 00:01:22,000
And what I've done is I've basically set the cache mode to cache ignore.

17
00:01:22,000 --> 00:01:26,000
To make sure that we're not using that secondary level cache, because obviously when we're batching things up

18
00:01:26,000 --> 00:01:28,000
we don't want to be hitting the cache.

19
00:01:28,000 --> 00:01:32,000
That's going to be really expensive. We're trying to avoid the cache.

20
00:01:32,000 --> 00:01:36,000
So by setting this CacheMode.IGNORE and then calling scroll.

21
00:01:36,000 --> 00:01:42,000
What I'm doing is I'm basically using a cursor in the database.

22
00:01:42,000 --> 00:01:49,000
This means that I'm going to be getting the data from the database as I ask for it

23
00:01:49,000 --> 00:01:51,000
as opposed to getting a big, large set of data at once.

24
00:01:51,000 --> 00:01:56,000
And this is important if you had hundreds of thousands of users,

25
00:01:56,000 --> 00:01:59,000
you might not have the memory to load them all up at once.

26
00:01:59,000 --> 00:02:02,000
So you're going to want to get them as you ask for them.

27
00:02:02,000 --> 00:02:09,000
So that's all the scroll is doing, and then we're setting up a count so we know how many users we've gotten.

28
00:02:09,000 --> 00:02:14,000
And then we're just setting up with while loop as long as users.next, we have the scrollable results,

29
00:02:14,000 --> 00:02:20,000
and it's going to continue to return true as long as there is a next piece of data to get.

30
00:02:20,000 --> 00:02:23,000
Then we're going through each user, we're going to get that user,

31
00:02:23,000 --> 00:02:26,000
and then we're going to just set up some new ProteinData.

32
00:02:26,000 --> 00:02:30,000
This could represent whatever change you're doing to that particular entity.

33
00:02:30,000 --> 00:02:33,000
And then I'm going to go ahead and save that entity.

34
00:02:33,000 --> 00:02:37,000
And then I've set this ups so that we're incrementing our count,

35
00:02:37,000 --> 00:02:42,000
and every second user we're going to go ahead and do a flush and a clear on the session.

36
00:02:42,000 --> 00:02:46,000
This is what's actually going to batch this up and send that data.

37
00:02:46,000 --> 00:02:51,000
Now remember, normally, Hibernate would wait, it would store the stuff in the first level cache,

38
00:02:51,000 --> 00:02:56,000
and it would wait until we committed our transaction to execute all of that SQL.

39
00:02:56,000 --> 00:03:03,000
But by doing a flush and clear we basically tell Hibernate, 'hey, go ahead and send what you have now.'

40
00:03:03,000 --> 00:03:10,000
And it's going to obey this batch size to determine how much data it should send at one given time.

41
00:03:10,000 --> 00:03:14,000
So we're still going to print out the names so we'll be able to tell what's going on here.

42
00:03:14,000 --> 00:03:17,000
And then we're still going to do our commit and them our close.

43
00:03:17,000 --> 00:03:20,000
So let's go head and run this code.

44
00:03:20,000 --> 00:03:24,000
And you can see the batching here by looking at here the names are.

45
00:03:24,000 --> 00:03:28,000
It's a little bit hard to read all of this that's going on because Hibernate's generating

46
00:03:28,000 --> 00:03:31,000
lots of different queries for our data.

47
00:03:31,000 --> 00:03:37,000
But you can see that we have Joe, and then we've got a few queries that were executed,

48
00:03:37,000 --> 00:03:39,000
and then Bob, and then Amy.

49
00:03:39,000 --> 00:03:41,000
So our batching was happening.

50
00:03:41,000 --> 00:03:46,000
Here, we ended up sending up this data, we have these extra inserts and updates.

51
00:03:46,000 --> 00:03:49,000
And we have selects happening here with Bob.

52
00:03:49,000 --> 00:03:53,000
And then after Amy we do an insert and update again.

53
00:03:53,000 --> 00:03:56,000
And you can really see the difference here if I were to change this.

54
00:03:56,000 --> 00:04:00,000
So, for example, if I change this to everyone.

55
00:04:00,000 --> 00:04:04,000
So every single user it's going to send that data up, It's not going to wait.

56
00:04:04,000 --> 00:04:10,000
Then if we run this, you'll notice that it's going to look a little bit different, this pattern.

57
00:04:10,000 --> 00:04:12,000
You can see the Joe, the Bob, the Amy.

58
00:04:12,000 --> 00:04:19,000
We don't have these big chunk in between here. We've got everything pretty much the same.

59
00:04:19,000 --> 00:04:20,000
And if I were to change this again.

60
00:04:20,000 --> 00:04:24,000
Let's say we made the batch size so that it's only going to do it every ten.

61
00:04:24,000 --> 00:04:29,000
So it's actually not going to send any data early, it's never going to hit this flush or clear,

62
00:04:29,000 --> 00:04:33,000
in our case, you can see again the difference in this data.

63
00:04:33,000 --> 00:04:38,000
We've got Joe, Bob, Amy, and then all of this happens at the very end.

64
00:04:38,000 --> 00:04:43,000
And you can do a very similar thing with inserts if you were inserting data

65
00:04:43,000 --> 00:04:47,000
but most often this is going to be used when you're doing some kind of an update.

66
00:04:47,000 --> 00:04:52,000
And you just want to make sure a couple of things, like I said, you don't want to have the cache,

67
00:04:52,000 --> 00:04:56,000
you want to use scroll so that you're not pulling down too much data at one time.

68
00:04:56,000 --> 00:05:03,000
And then by doing this session flush and clear that's how you're basically chopping things up

69
00:05:03,000 --> 00:59:00,000
to send them in batches.

