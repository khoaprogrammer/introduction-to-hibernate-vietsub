1
00:00:01,000 --> 00:00:07,000
Now the last thing that you'll need to do is to actually configure some caching strategies for your entities.

2
00:00:07,000 --> 00:00:10,000
And we're not going to go into the details of doing this in this module

3
00:00:10,000 --> 00:00:13,000
because we're going to keep things at a higher level here

4
00:00:13,000 --> 00:00:16,000
and I just want to show you the basic of caching.

5
00:00:16,000 --> 00:00:22,000
You can of course find out more information if you want to actually set up some realistic caching scenarios,

6
00:00:22,000 --> 00:00:24,000
but now you'll know at least how to get started.

7
00:00:24,000 --> 00:00:27,000
So what we're going to do is we're just going to go to our user,

8
00:00:27,000 --> 00:00:32,000
and we're going to add some caching so this could be cached.

9
00:00:32,000 --> 00:00:34,000
So you can just add this cache element here.

10
00:00:34,000 --> 00:00:41,000
And you can see its defaulting to read-only but you have this nonstrict-read-write, read-only,

11
00:00:41,000 --> 00:00:42,000
read-write, and transactional.

12
00:00:42,000 --> 00:00:48,000
And these are going to depend on what cache implementation you're using and how you're using the objects.

13
00:00:48,000 --> 00:00:52,000
We're basically just going to set this to read-write.

14
00:00:52,000 --> 00:00:55,000
Read-only is if you have dadta that doesn't change.

15
00:00:55,000 --> 00:01:02,000
For example, you had a drop down that had a list of states and you're getting that data from the database.

16
00:01:02,000 --> 00:01:03,000
That would be a good candidate for read-only.

17
00:01:03,000 --> 00:01:09,000
Read-write is going to be somewhat flexible because we're going to rarely update this data,

18
00:01:09,000 --> 00:01:15,000
we're mostly going to be reading it if we're using a cache for this, otherwise we really wouldn't need a cache.

19
00:01:15,000 --> 00:01:18,000
So that's going to work for a good majority of your cases.

20
00:01:18,000 --> 00:01:20,000
So we're going to read-write on this.

21
00:01:20,000 --> 00:01:28,000
And then the other thing we're going to so is we're going to go ahead and cache our history

22
00:01:28,000 --> 00:01:30,000
and we're going to do this in two places.

23
00:01:30,000 --> 00:01:35,000
First we have this list, so we're going to add a cache here.

24
00:01:35,000 --> 00:01:39,000
And we're going to make this cache not read-only, we're going to make this one read-write

25
00:01:39,000 --> 00:01:43,000
because we could have new history items created.

26
00:01:43,000 --> 00:01:49,000
But then we're going to go to our UserHistory class, and we're going to add caching here

27
00:01:49,000 --> 00:01:55,000
but we're going to make this one read-only because an individual history item is not going to change.

28
00:01:55,000 --> 00:01:57,000
We don't have any ability to change it.

29
00:01:57,000 --> 00:02:02,000
So now we'll have some very, very basic caching. We can go ahead and run this, test this out.

30
00:02:02,000 --> 00:02:08,000
And we're not really going to be able to very easily prove that we're using the cache, or debug this.

31
00:02:08,000 --> 00:02:12,000
There are of course ways that you can turn on some debugging and logging

32
00:02:12,000 --> 00:02:15,000
and definitely using cache in real application

33
00:02:15,000 --> 00:02:19,000
First of all, you're not going to be want to be implementing caching unless you have a good reason

34
00:02:19,000 --> 00:02:22,000
and you're already checking your performance and you're seeing that caching

35
00:02:22,000 --> 00:02:24,000
is actually improving your performance.

36
00:02:24,000 --> 00:02:29,000
Because believe it or not, caching can actually hurt your performance

37
00:02:29,000 --> 00:02:33,000
if you're making a lot of writes to some objects.

38
00:02:33,000 --> 00:02:38,000
Especially with Hibernate, the way that it's going to have to now go to the secondary level cache

39
00:02:38,000 --> 00:02:42,000
instead of directly going to the primary cache and to the database.

40
00:02:42,000 --> 00:02:44,000
So there is definitely some overhead here.

41
00:02:44,000 --> 00:02:49,000
So you do want to measure things when you're actually using this in a real application

42
00:02:49,000 --> 00:02:50,000
but that's the basics.

43
00:02:50,000 --> 00:02:57,000
Now you can see how to set up caching and that's really some of the harder parts as far as getting started.

44
00:02:57,000 --> 00:03:03,000
Once you actually want to set up your caching, then you'll have to determine what strategy you're going to use

45
00:03:03,000 --> 00:03:08,000
and that's really going to depend on your application and what you're trying to accomplish.

46
00:03:08,000 --> 00:59:00,000
And of course, the performance you're going to have to measure to determine if it's even worth using a cache.

