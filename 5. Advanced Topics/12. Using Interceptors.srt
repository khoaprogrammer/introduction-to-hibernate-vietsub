1
00:00:01,000 --> 00:00:04,000
Okay, so we're just going to create a simple interceptor.

2
00:00:04,000 --> 00:00:09,000
This interceptor is basically going to execute whenever we save anything.

3
00:00:09,000 --> 00:00:12,000
So I'm just going to create a new class for this interceptor.

4
00:00:12,000 --> 00:00:18,000
And we're just going to call this AuditInterceptor.

5
00:00:18,000 --> 00:00:23,000
And what we're going to do here is we can either implement the interceptor interface

6
00:00:23,000 --> 00:00:28,000
but it's a little bit easier if we do this extend EmptyInterceptor.

7
00:00:28,000 --> 00:00:32,000
And the reason why I'm going to do this instead of implementing the interface is because

8
00:00:32,000 --> 00:00:36,000
EmptyInterceptor is going to give u some default implementation for everything

9
00:00:36,000 --> 00:00:41,000
so we won't have to implement every single method on the interceptor interface.

10
00:00:41,000 --> 00:00:45,000
Which is quite a few of them and if we don't need behavior for all of those,

11
00:00:45,000 --> 00:00:51,000
we don't need to waste the time trying to implement that when we can just use this EmptyInterceptor.

12
00:00:51,000 --> 00:00:53,000
So the next thing we're going to so is we're just going to go to Source.

13
00:00:53,000 --> 00:00:59,000
And then if you go to Override/Implement Methods you can see all of these methods that we can override.

14
00:00:59,000 --> 00:01:03,000
And this is all the lpaces that we can do something with our interceptors.

15
00:01:03,000 --> 00:01:09,000
We have things like afterTransactionBegin, afterTransactionCompletion, we've got findDirty,

16
00:01:09,000 --> 00:01:16,000
getEntity, instantiate, we're going to just do this save, here.

17
00:01:16,000 --> 00:01:23,000
And then we're also going to do postFlush. Onsave is going to happen whenever we try to save an entity.

18
00:01:23,000 --> 00:01:30,000
PostFlush is going to happen after the data's been actually saved to the database or flushed to the database.

19
00:01:30,000 --> 00:01:35,000
So I'm just going to click OK, and so now we have these autogenerated overrides.

20
00:01:35,000 --> 00:01:40,000
And here we can do whatever we would want to do when this happens.

21
00:01:40,000 --> 00:01:46,000
You can see that we're getting our entity passed in, for example, on this onSave.

22
00:01:46,000 --> 00:01:53,000
So we could do something with that entity, we could basically, get some data out of there if we wanted to,

23
00:01:53,000 --> 00:01:56,000
we could cast this if we knew what the type was.

24
00:01:56,000 --> 00:02:00,000
Perhaps we have some interface that we're using as a marker to determine

25
00:02:00,000 --> 00:02:02,000
whether or not we're supposed to do something.

26
00:02:02,000 --> 00:02:06,000
But in our case, we're going to keep things really simple.

27
00:02:06,000 --> 00:02:13,000
All we're going to do is we're just going to do a System.out.println

28
00:02:13,000 --> 00:02:18,000
and then we're just going to print out Saving and entity.

29
00:02:18,000 --> 00:02:21,000
then we're just going to return false from here.

30
00:02:21,000 --> 00:02:25,000
And we return false because we didn't modify anything in that state variable that was passed in.

31
00:02:25,000 --> 00:02:29,000
If you modify anything with the state then you need to return true.

32
00:02:29,000 --> 00:02:33,000
And then we're going to go ahead and go to our postFlush,

33
00:02:33,000 --> 00:02:39,000
and here let's just go ahead and do a System.out.println,

34
00:02:39,000 --> 00:02:46,000
and we're just going to say After entity has been flushed.

35
00:02:46,000 --> 00:02:50,000
So that's our basic interceptor. Remember you can do whatever you want here.

36
00:02:50,000 --> 00:02:56,000
You can have all kinds of complicated logic to perhaps extract some data from this entity

37
00:02:56,000 --> 00:03:01,000
in order to create a log record that you might save in a database, or something like that.

38
00:03:01,000 --> 00:03:05,000
Often you'll see a pattern where all the saves will get batched up

39
00:03:05,000 --> 00:03:12,000
and then once the flush happens that's when the actually audits will created and sent to the database.

40
00:03:12,000 --> 00:03:16,000
But we're going to keep things very simple, in this case, just to demonstrate this functionality.

41
00:03:16,000 --> 00:03:21,000
So now in order to use our interceptor what we want to do is we're going to set this

42
00:03:21,000 --> 00:03:24,000
at the session factory level.

43
00:03:24,000 --> 00:03:31,000
So we're going to go into our HibernateUtilities and what we're going to do is

44
00:03:31,000 --> 00:03:35,000
on our configuration we can actually set the interceptor.

45
00:03:35,000 --> 00:03:40,000
So before we do this .configure, we're going to do .setInterceptor,

46
00:03:40,000 --> 00:03:47,000
and we're going to set this equal to a new instance of our auditInterceptor.

47
00:03:47,000 --> 00:03:53,000
Now this interceptor is going to be used with everything that gets generated from this session factory.

48
00:03:53,000 --> 00:03:58,000
So if we go ahead and run this code now, you'll notice that our messages are in here.

49
00:03:58,000 --> 00:04:05,000
So, if we look at what's happening, you can see that we have a bunch of saving and entities,

50
00:04:05,000 --> 00:04:08,000
this is where we're generating all that fake data.

51
00:04:08,000 --> 00:04:10,000
So we're doing a lot of saves here.

52
00:04:10,000 --> 00:04:16,000
And then you can see after entity has been flushed, it actually ends up getting called

53
00:04:16,000 --> 00:04:19,000
because we end up doing a flush right here.

54
00:04:19,000 --> 00:04:26,000
And then at the end we do this second query where we're getting Joe, Bob, and Amy,

55
00:04:26,000 --> 00:04:31,000
Remember we're doing that native SQL query, and then the entity becomes flushed again.

56
00:04:31,000 --> 00:04:34,000
So you can see that points where we can use this interceptor.

57
00:04:34,000 --> 00:04:39,000
And if we just look at our code real quick, you can see what's happening here,

58
00:04:39,000 --> 00:04:43,000
when we did our populate sample data we are of course creating our users,

59
00:04:43,000 --> 00:04:46,000
we ended up closing our session, that's where our first flush came from.

60
00:04:46,000 --> 00:04:48,000
And we're saving a lot of data there.

61
00:04:48,000 --> 00:04:54,000
And then when we close our session a second time, that's where that second flush ended up happening.

62
00:04:54,000 --> 00:04:59,000
And I've also found that interceptors can be really useful for debugging.

63
00:04:59,000 --> 00:05:04,000
For instance, you can see that in order to implement this interceptor, to use this interceptor,

64
00:05:04,000 --> 00:05:08,000
all we had to do was add this .seInterceptor to our configuration.

65
00:05:08,000 --> 00:05:14,000
We didn't have to really change any of our code so it's a way to inject some logging

66
00:05:14,000 --> 00:05:20,000
or some kind of debugging into your application because all you have to do is, basically,

67
00:05:20,000 --> 00:05:25,000
do whatever you want to do when a save happens or a flush happens.

68
00:05:25,000 --> 00:05:31,000
And you can either print out messages or you could examine objects and get data.

69
00:05:31,000 --> 00:59:00,000
It gives you some ability to basically, add some functionality at these given points.

