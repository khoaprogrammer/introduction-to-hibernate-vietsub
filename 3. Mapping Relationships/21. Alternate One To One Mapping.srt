1
00:00:01,000 --> 00:00:04,000
Now with the current way we did our one to one mapping

2
00:00:04,000 --> 00:00:12,000
we are using the same id were basically using whatever the users id is for the id for our protein data

3
00:00:12,000 --> 00:00:17,000
table. Now you might not want to do this, you might want to have a separate id for protein data, and

4
00:00:17,000 --> 00:00:23,000
then have the user id reference that as a foreign key. We can change our one to one mapping to do this

5
00:00:23,000 --> 00:00:29,000
pretty easily, all we have to do is go into our mapping file and were going to start with our user mapping,

6
00:00:29,000 --> 00:00:35,000
and what were going to do here is we're going to change this actually from a one to one mapping to a

7
00:00:35,000 --> 00:00:43,000
many to one. So were just going to add a many to one and I'm going to go ahead and copy this to save us a

8
00:00:43,000 --> 00:00:49,000
little bit of time here. Then we'll get rid of our one to one, and lets go ahead and take a look at this

9
00:00:49,000 --> 00:00:55,000
so were setting up a many to one on protein data, we have our class of protein data, we actually gave it a

10
00:00:55,000 --> 00:01:01,000
column name of protein data id, because remember this is going to be the foreign key, the id coming from that

11
00:01:01,000 --> 00:01:08,000
protein data table. We did our cascade save and update, and then we have unique set to true.

12
00:01:08,000 --> 00:01:14,000
So what this is basically going to do is its going to make it so that this is unique, even though this says

13
00:01:14,000 --> 00:01:23,000
a many to one mapping it's going to constrain this with this unique constraint so that in that table this

14
00:01:23,000 --> 00:01:29,000
protein data id has to be unique. So what does that mean? It basically means that were only going to have a

15
00:01:29,000 --> 00:01:35,000
one to one mapping. So even though were using many to one, we end up creating a one to one.

16
00:01:35,000 --> 00:01:43,000
Now on the protein data side we can make a change as well, what we can do here is first of all we don't want

17
00:01:43,000 --> 00:01:51,000
to use the user id we want it to have its own id. So let's change this generator to be in increment, and

18
00:01:51,000 --> 00:01:59,000
get rid of this param part here, and we'll shorten this. So now were just generating an id, and then on

19
00:01:59,000 --> 00:02:06,000
this one to one mapping we can leave this in place, but instead of using constrained true here were actually

20
00:02:06,000 --> 00:02:12,000
going to use this property ref and then were going to say the property that this maps to on the user class,

21
00:02:12,000 --> 00:02:23,000
which is protein data. Now by doing this we'll make sure that this user on our protein data gets populated

22
00:02:23,000 --> 00:02:29,000
with the correct thing here, that it's going to know to look back at protein data and that's how it's going

23
00:02:29,000 --> 00:02:37,000
to determine what the actual user is. So when it looks at that particular user that maps back and it sees

24
00:02:37,000 --> 00:02:44,000
the protein data field that's going to be this particular class. Not completely import ably you understand

25
00:02:44,000 --> 00:02:51,000
exactly how that works, but this is the basic syntax when you want to do this one to one mapping this way.

26
00:02:51,000 --> 00:02:58,000
So if we were to go ahead and run this, and actually before we run this lets make sure we save everything

27
00:02:58,000 --> 00:03:06,000
and we'll go to our program, and let's just go ahead and do something that will just prove that were using

28
00:03:06,000 --> 00:03:15,000
separate id's now. So before we commit this last transaction let's just go ahead and do user.setproteindata,

29
00:03:15,000 --> 00:03:21,000
and we're just going to set a new protein data. So this will give us a new id and we can test this out to

30
00:03:21,000 --> 00:03:27,000
make sure that foreign key is working. So I'm going to go ahead and run this, and we can look at our output,

31
00:03:27,000 --> 00:03:34,000
everything looks good. We're going to go back into our SQL workbench, I'll refresh this.

32
00:03:34,000 --> 00:03:40,000
Now if we look at our protein data, you can see inside here quite a few rows, we have a about four rows in

33
00:03:40,000 --> 00:03:47,000
here. I actually created some fake data ahead of time just to make sure that we'd have unique IDs

34
00:03:47,000 --> 00:03:54,000
that we could test out. So we've actually got four IDs, if we go to our users table and select from here,

35
00:03:54,000 --> 00:04:00,000
you can see that this is actually set to protein data id of four, so the current version of the protein

36
00:04:00,000 --> 00:04:07,000
data for this particular user would actually be this row four with a total 0 and a goal of 0, that one that

37
00:04:07,000 --> 00:04:14,000
we created new. So you can see here the difference really is just that we have on our users this protein

38
00:04:14,000 --> 00:04:20,000
data id, which is a foreign key to protein data. When we had done this the first time they were both using

39
00:04:20,000 --> 00:59:00,000
the same id for the user id.

