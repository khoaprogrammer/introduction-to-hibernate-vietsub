1
00:00:01,000 --> 00:00:07,000
Now we can also map a plain collection in Hibernate using either a bag or id bag.

2
00:00:07,000 --> 00:00:15,000
So what I mean by this is for example we could just do collection, and not specify set or list, or anything

3
00:00:15,000 --> 00:00:19,000
like that. I'm going to go ahead and do an import, let's go ahead and convert this over.

4
00:00:19,000 --> 00:00:26,000
It will actually be pretty simple to do, we do need a concrete type here or an implementation so let's go

5
00:00:26,000 --> 00:00:30,000
ahead and make this in the ray list, but it doesn't really matter what were using here because it's going

6
00:00:30,000 --> 00:00:40,000
to implement that collection interface. And then we'll just fix these getters and setters to use collection,

7
00:00:40,000 --> 00:00:48,000
and we won't have the string part.

8
00:00:48,000 --> 00:00:53,000
And then let's go back to our main program and we'll pretty much convert this back.

9
00:00:53,000 --> 00:01:03,000
We'll just make this be add, and then the same thing here with our loop, we don't need to do this entry set

10
00:01:03,000 --> 00:01:13,000
anymore were just going to get the history. And this will just be user history and then we won't have a key,

11
00:01:13,000 --> 00:01:24,000
and we don't need to call get value. And we'll fix this last one here, just make this add.

12
00:01:24,000 --> 00:01:28,000
So now we can just use this just as a collection, we need to update our mapping and what were going to use

13
00:01:28,000 --> 00:01:37,000
here is we're going to use the id bag. Now we could just use a bag, basically a bag or even an id bag is

14
00:01:37,000 --> 00:01:44,000
going to allow you to just have a collection of things, they can be duplicated they don't have any order.

15
00:01:44,000 --> 00:01:51,000
So and the reason why were going to use id bag is because we want to make it so that we don't have to have

16
00:01:51,000 --> 00:02:00,000
everything be unique. If we just use bag then really the unique identifier for the row is going to be all

17
00:02:00,000 --> 00:02:03,000
of our data for that row, so we couldn't have duplicate rows in there.

18
00:02:03,000 --> 00:02:09,000
But by using id bag we can have duplicate rows, it's really not that big of a deal the difference between

19
00:02:09,000 --> 00:02:15,000
id bag, and bag, just in the case where you have data that you might need to be duplicated.

20
00:02:15,000 --> 00:02:21,000
If you want to be on the safe side you can just always use id bag in those situations.

21
00:02:21,000 --> 00:02:26,000
So were going to use id bag and the only thing we really need to do with id bag that's a little bit unique

22
00:02:26,000 --> 00:02:34,000
is that we need to have a unique id. So were basically going to create a surrogate key or this unique

23
00:02:34,000 --> 00:02:40,000
identifier for every row in here, which is not going to be the combination of our columns like we have by

24
00:02:40,000 --> 00:02:48,000
default. So we just set this collection id and we have to specify the type in this case it will be an int.

25
00:02:48,000 --> 00:02:55,000
And we have to specify the column; we'll just call this id. And then inside here we need to specify a

26
00:02:55,000 --> 00:03:04,000
generator just like we did for our id up here, and were going to just set this equal to increment.

27
00:03:04,000 --> 00:03:12,000
So now we have our id that's automatically going to be generated. And we were already using id for our key

28
00:03:12,000 --> 00:03:18,000
column, lets actually change this to user id because that actually more accurate anyway now that we have

29
00:03:18,000 --> 00:03:25,000
two pieces of data here because this is really a foreign key that going to the user table, so if we say

30
00:03:25,000 --> 00:03:30,000
user id that makes a little bit more sense. And then were going to get rid of this map key, a little trick

31
00:03:30,000 --> 00:03:36,000
with Hibernate mappings, see how that squiggly red line disappeared? Well that will help you to know when

32
00:03:36,000 --> 00:03:45,000
you've got this mapping correct. So because we had for example if I bring that back, this map key its

33
00:03:45,000 --> 00:03:52,000
incorrect that's not a valid for an id bag. So if you're missing something, or you have something extra it

34
00:03:52,000 --> 00:03:57,000
will give you an error there. So now we have everything mapped, we can basically just run this.

35
00:03:57,000 --> 00:04:02,000
So let's go to our main program, and we'll run this, and let's take a look at our output.

36
00:04:02,000 --> 00:04:08,000
We can see that our output looks good, we are getting the output that we expected we got Joe 250, and then

37
00:04:08,000 --> 00:04:17,000
we got those two entries in there. And if we go to the My SQL and we do a Refresh, we can see our user

38
00:04:17,000 --> 00:04:23,000
history table and inside here now you can see that we've changed the column name here for user id, this maps

39
00:04:23,000 --> 00:04:31,000
to the actual user id in the users table. But now we have this id that's going to act as a unique identifier

40
00:04:31,000 --> 00:04:38,000
for this particular table so that it won't be having to use a combination of these column so we can actually

41
00:04:38,000 --> 00:59:00,000
have duplicate data, whereas before we wouldn't have been able to.

