1
00:00:01,000 --> 00:00:05,000
We're going to start off by generating a mapping and then we'll modify this, so were

2
00:00:05,000 --> 00:00:11,000
just going to go to new XML mapping file, we've got protein data, we don't want to regenerate these other

3
00:00:11,000 --> 00:00:19,000
ones so let's go ahead and uncheck user and user history, we'll click Finish.

4
00:00:19,000 --> 00:00:26,000
And now we can take a look at our protein data mapping, and this is not going to be exactly what we want, but

5
00:00:26,000 --> 00:00:33,000
it will generate some of the things that we need here, we've got our user, and our goal, and actually when we

6
00:00:33,000 --> 00:00:38,000
look at this, this is actually pretty close. So there's a couple of things here of course we have our

7
00:00:38,000 --> 00:00:46,000
properties, but then we have our one to one, were basically saying that this maps one to one to user, and

8
00:00:46,000 --> 00:00:50,000
here's the class for user we can go ahead and use this shorter form.

9
00:00:50,000 --> 00:00:57,000
Now we do need to add this constrained, so let's set constrained equal to true, what this is going to do is

10
00:00:57,000 --> 00:01:04,000
it's going to make it so that there has to be exactly one valid user for this property, so it does have to

11
00:01:04,000 --> 00:01:13,000
map, it's going to make sure that it is going to check to make sure that this key is going to match up so

12
00:01:13,000 --> 00:01:17,000
that this protein data will go to a user. So you do want to put constrained in there, then the other thing

13
00:01:17,000 --> 00:01:24,000
that we want to do is we want to set it up so this id is going to be the id of the user.

14
00:01:24,000 --> 00:01:32,000
We're going to use the user id for our id instead of having our own id, so essentially when we look at our

15
00:01:32,000 --> 00:01:37,000
database table it's not going to have a particular protein data id it's just going to reuse the user id.

16
00:01:37,000 --> 00:01:43,000
So if you wanted a query for protein data for a user you just query based on that id.

17
00:01:43,000 --> 00:01:49,000
So in order to do this what we want to do is we don't want to use this assign, were going to go ahead and

18
00:01:49,000 --> 00:01:57,000
have our name, id, our type int, our column name can be id, you could change this to user id if you wanted to.

19
00:01:57,000 --> 00:02:02,000
But then for our generator we actually want to use instead of an assigned were going to use foreign which is

20
00:02:02,000 --> 00:02:09,000
basically meaning it's going to be a foreign key that were going to use for our generator.

21
00:02:09,000 --> 00:02:16,000
And then inside here were going to use this param, and were going to set the name equal to property, and

22
00:02:16,000 --> 00:02:25,000
then user. And so what this is going to do is its basically going to look for the user property on our

23
00:02:25,000 --> 00:02:31,000
protein data and its going to use that as the id so it's going to get the id from there.

24
00:02:31,000 --> 00:02:37,000
And this may look a little bit weird, but this is just the way that it has to mapped in order for this to

25
00:02:37,000 --> 00:02:42,000
work properly, but it's basically just going to grab the data from here, that's why we're saying user

26
00:02:42,000 --> 00:02:51,000
parameter for this param here and using foreign. So now we have our protein data side map, but we have

27
00:02:51,000 --> 00:02:57,000
to make some changes to our user mapping so let's go ahead and go back to that side.

28
00:02:57,000 --> 00:03:02,000
We're going to go to our user, and with user what we want to do is we're going to get rid of this component

29
00:03:02,000 --> 00:03:10,000
since we don't need that anymore, and then on this side were just going to do a one to one, and were going

30
00:03:10,000 --> 00:03:18,000
to name this protein date. And then we need to specify the class, so we're going to set this equal to

31
00:03:18,000 --> 00:03:28,000
com.simpleprogrammer.proteindata. And then we want to set the cascade on this just like we did with the

32
00:03:28,000 --> 00:03:36,000
other one because we want to make sure that when we save a new user we also save the protein data, it

33
00:03:36,000 --> 00:03:41,000
wouldn't real do us much good if we didn't do that. So were going to do Save Update, now we could of course

34
00:03:41,000 --> 00:03:48,000
save each entity by themselves, but that's a big pain when were really using this always from this user

35
00:03:48,000 --> 00:03:54,000
object. So that's pretty much it, the only other thing we need to do is go into our Hibernate config and

36
00:03:54,000 --> 00:04:05,000
we're going to add our mapping, this one is called protein data. So let's go ahead and run this and see what

37
00:04:05,000 --> 00:04:12,000
we get here. So if we look at our console view you can see everything ran correctly and now if we bring up

38
00:04:12,000 --> 00:04:19,000
our SQL workbench, let's go ahead and do a Refresh. You can see now we have this protein data table, we can

39
00:04:19,000 --> 00:04:25,000
select from here and you can see that we have id one, this is going to correspond to the id in the user

40
00:04:25,000 --> 00:04:30,000
table. We've got our total and our goal, so were basically starting protein data in this table.

41
00:04:30,000 --> 00:04:37,000
And if we were to go to our user history, we still have our user history in there its using this user id,

42
00:04:37,000 --> 00:04:44,000
notice it's all one in here. And then if we go to user you'll see that id one and we've got our name value.

43
00:04:44,000 --> 00:04:49,000
So we've basically taken the protein data out of this table, we've moved it into its own table, it has a

44
00:04:49,000 --> 00:59:00,000
matching id that you can use to lookup that data.

